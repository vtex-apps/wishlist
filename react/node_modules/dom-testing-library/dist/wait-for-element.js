'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitForElement = undefined;

require('mutationobserver-shim');

function waitForElement() {
  var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$container = _ref.container,
      container = _ref$container === undefined ? document : _ref$container,
      _ref$timeout = _ref.timeout,
      timeout = _ref$timeout === undefined ? 4500 : _ref$timeout,
      _ref$mutationObserver = _ref.mutationObserverOptions,
      mutationObserverOptions = _ref$mutationObserver === undefined ? { subtree: true, childList: true } : _ref$mutationObserver;

  return new Promise(function (resolve, reject) {
    // Disabling eslint prefer-const below: either prefer-const or no-use-before-define triggers.
    var lastError = void 0,
        observer = void 0,
        timer = void 0; // eslint-disable-line prefer-const
    function onDone(error, result) {
      clearTimeout(timer);
      observer.disconnect();
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }
    function onMutation() {
      if (callback === undefined) {
        onDone(null, undefined);
        return;
      }
      try {
        var result = callback();
        if (result) {
          onDone(null, result);
        }
        // If `callback` returns falsy value, wait for the next mutation or timeout.
      } catch (error) {
        // Save the callback error to reject the promise with it.
        lastError = error;
        // If `callback` throws an error, wait for the next mutation or timeout.
      }
    }
    function onTimeout() {
      onDone(lastError || new Error('Timed out in waitForElement.'), null);
    }
    timer = setTimeout(onTimeout, timeout);
    observer = new MutationObserver(onMutation);
    observer.observe(container, mutationObserverOptions);
    if (callback !== undefined) {
      onMutation();
    }
  });
}

exports.waitForElement = waitForElement;