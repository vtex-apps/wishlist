{
  "_from": "tslint",
  "_id": "tslint@5.11.0",
  "_inBundle": false,
  "_integrity": "sha1-mPMMAurjzecAYgHkwzywi0hYHu0=",
  "_location": "/tslint",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "tslint",
    "fetchSpec": "latest",
    "name": "tslint",
    "raw": "tslint",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/tslint/-/tslint-5.11.0.tgz",
  "_shasum": "98f30c02eae3cde7006201e4c33cb08b48581eed",
  "_spec": "tslint",
  "_where": "C:\\Users\\lucia\\wishlist\\react",
  "bin": {
    "tslint": "./bin/tslint"
  },
  "bugs": {
    "url": "https://github.com/palantir/tslint/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-code-frame": "^6.22.0",
    "builtin-modules": "^1.1.1",
    "chalk": "^2.3.0",
    "commander": "^2.12.1",
    "diff": "^3.2.0",
    "glob": "^7.1.1",
    "js-yaml": "^3.7.0",
    "minimatch": "^3.0.4",
    "resolve": "^1.3.2",
    "semver": "^5.3.0",
    "tslib": "^1.8.0",
    "tsutils": "^2.27.2"
  },
  "deprecated": false,
  "description": "An extensible static analysis linter for the TypeScript language",
  "devDependencies": {
    "@types/babel-code-frame": "^6.20.0",
    "@types/chai": "^3.5.0",
    "@types/diff": "^3.2.0",
    "@types/glob": "^5.0.30",
    "@types/js-yaml": "^3.5.31",
    "@types/minimatch": "^2.0.29",
    "@types/mocha": "^2.2.35",
    "@types/node": "^7.0.29",
    "@types/resolve": "^0.0.4",
    "@types/rimraf": "^2.0.2",
    "@types/semver": "^5.3.30",
    "chai": "^3.5.0",
    "github": "^8.2.1",
    "json-stringify-pretty-compact": "^1.0.3",
    "mocha": "^3.2.0",
    "npm-run-all": "^4.0.2",
    "nyc": "^10.2.0",
    "rimraf": "^2.5.4",
    "ts-node": "^3.3.0",
    "tslint": "^5.8.0",
    "tslint-test-config-non-relative": "file:test/external/tslint-test-config-non-relative",
    "typescript": "~2.9.2"
  },
  "engines": {
    "node": ">=4.8.0"
  },
  "homepage": "https://github.com/palantir/tslint#readme",
  "keywords": [
    "cli",
    "linter",
    "typescript"
  ],
  "license": "Apache-2.0",
  "main": "./lib/index.js",
  "name": "tslint",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=2.1.0 || >=2.1.0-dev || >=2.2.0-dev || >=2.3.0-dev || >=2.4.0-dev || >=2.5.0-dev || >=2.6.0-dev || >=2.7.0-dev || >=2.8.0-dev || >=2.9.0-dev"
  },
  "readme": "[![NPM version](https://badge.fury.io/js/tslint.svg)](http://badge.fury.io/js/tslint)\n[![Downloads](http://img.shields.io/npm/dm/tslint.svg)](https://npmjs.org/package/tslint)\n[![Circle CI](https://circleci.com/gh/palantir/tslint.svg?style=svg)](https://circleci.com/gh/palantir/tslint)\n\nTSLint\n======\n\nTSLint is an extensible static analysis tool that checks [TypeScript](https://github.com/Microsoft/TypeScript) code for readability, maintainability, and functionality errors. It is widely supported across modern editors & build systems and can be customized with your own lint rules, configurations, and formatters.\n\nTSLint supports:\n\n- an extensive set of core rules\n- custom lint rules\n- custom formatters (failure reporters)\n- inline disabling and enabling of rules with comment flags in source code\n- configuration presets (`tslint:latest`, `tslint-react`, etc.) and plugin composition\n- automatic fixing of formatting & style violations\n- integration with [MSBuild](https://github.com/joshuakgoldberg/tslint.msbuild), [Grunt](https://github.com/palantir/grunt-tslint), [Gulp](https://github.com/panuhorsmalahti/gulp-tslint), [Atom](https://github.com/AtomLinter/linter-tslint), [Eclipse](https://github.com/palantir/eclipse-tslint), [Emacs](http://flycheck.org), [Sublime](https://packagecontrol.io/packages/SublimeLinter-contrib-tslint), [Vim](https://github.com/scrooloose/syntastic), [Visual Studio 2015](https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebAnalyzer), [Visual Studio 2017](https://marketplace.visualstudio.com/items?itemName=RichNewman.TypeScriptAnalyzer), [Visual Studio code](https://marketplace.visualstudio.com/items?itemName=eg2.tslint), [WebStorm](https://www.jetbrains.com/webstorm/help/tslint.html) and [more](https://palantir.github.io/tslint/usage/third-party-tools/)\n\nInstallation & Usage\n------------\n\nPlease refer to the full installation & usage documentation on the [TSLint website](https://palantir.github.io/tslint/). There, you'll find information about\n- [configuration](https://palantir.github.io/tslint/usage/configuration/),\n- [core rules](https://palantir.github.io/tslint/rules/),\n- [core formatters](https://palantir.github.io/tslint/formatters/), and\n- [customization of TSLint](https://palantir.github.io/tslint/develop/custom-rules/).\n- [inline disabling and enabling of rules with comment flags](https://palantir.github.io/tslint/usage/rule-flags/)\n\nCustom Rules & Plugins\n------------\n\n#### Custom rule sets from Palantir\n\n- [tslint-react](https://github.com/palantir/tslint-react) - Lint rules related to React & JSX.\n- [tslint-blueprint](https://github.com/palantir/tslint-blueprint) - Lint rules to enforce best practices with [blueprintjs libraries](https://github.com/palantir/blueprint)\n\n#### Custom rule sets from the community\n\nIf we don't have all the rules you're looking for, you can either write your own [custom rules](https://palantir.github.io/tslint/develop/custom-rules/) or use rules implementations developed by the community. The repos below are a good source of custom rules:\n\n- [ESLint rules for TSLint](https://github.com/buzinas/tslint-eslint-rules) - Improve your TSLint with the missing ESLint Rules\n- [tslint-microsoft-contrib](https://github.com/Microsoft/tslint-microsoft-contrib) - A set of TSLint rules used on some Microsoft projects\n- [codelyzer](https://github.com/mgechev/codelyzer) - A set of tslint rules for static code analysis of Angular TypeScript projects\n- [vrsource-tslint-rules](https://github.com/vrsource/vrsource-tslint-rules)\n- [tslint-immutable](https://github.com/jonaskello/tslint-immutable) - TSLint rules to disable mutation in TypeScript\n- [tslint-consistent-codestyle](https://github.com/ajafff/tslint-consistent-codestyle) - TSLint rules to enforce consistent code style in TypeScript\n- [tslint-sonarts](https://github.com/SonarSource/SonarTS) - Bug-finding rules based on advanced code models to spot hard to find errors in TypeScript\n- [tslint-clean-code](https://github.com/Glavin001/tslint-clean-code) - A set of TSLint rules inspired by the Clean Code handbook\n- [rxjs-tslint-rules](https://github.com/cartant/rxjs-tslint-rules) - TSLint rules for RxJS \n\nDevelopment\n-----------\n\nPrerequisites:\n\n- `node` v7+\n- `yarn` v1.0+\n\n#### Quick Start\n\n```bash\ngit clone git@github.com:palantir/tslint.git --config core.autocrlf=input --config core.eol=lf\nyarn\nyarn compile\nyarn test\n```\n\nCreating a new release\n----------------------\n\n1. Bump the version number in `package.json` and `src/linter.ts`\n2. Add release notes in `CHANGELOG.md`\n    - Use `./scripts/generate-changelog.js` (after building it with `tsc -p scripts`) to generate the changelog diff. This script expects a [Github.com personal access token](https://github.com/settings/tokens) to exist at `~/github_token.txt` with \"repo\" permissions.\n4. Commit with message `Prepare release <version>`\n5. Push your branch to GitHub and make a PR\n6. Once your PR is merged, wait for the tests to pass on CircleCI for develop\n7. Create a \"Release\" on GitHub with the proper tag version and notes from the changelog.\n    - The tag should be identical to the version in `package.json`\n8. Run `yarn run publish:local`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/palantir/tslint.git"
  },
  "scripts": {
    "clean": "npm-run-all -p clean:core clean:test",
    "clean:core": "rimraf lib",
    "clean:test": "rimraf build && rimraf test/config/node_modules",
    "compile": "npm-run-all -p compile:core compile:test -s compile:scripts",
    "compile:core": "tsc -p src",
    "compile:scripts": "tsc -p scripts",
    "compile:test": "tsc -p test",
    "coverage": "rimraf coverage .nyc_output && nyc npm test",
    "docs": "node scripts/buildDocs.js",
    "lint": "npm-run-all -p lint:global lint:from-bin",
    "lint:from-bin": "node bin/tslint --project test/tsconfig.json --format stylish",
    "lint:global": "tslint --project test/tsconfig.json --format stylish",
    "publish:local": "./scripts/npmPublish.sh",
    "test": "npm-run-all test:pre -p test:mocha test:rules",
    "test:mocha": "mocha --reporter spec --colors \"build/test/**/*Tests.js\"",
    "test:pre": "cd ./test/config && npm install --no-save",
    "test:rules": "node ./build/test/ruleTestRunner.js",
    "verify": "npm-run-all clean compile lint test docs"
  },
  "typings": "./lib/index.d.ts",
  "version": "5.11.0"
}
