'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanup = exports.renderIntoDocument = exports.fireEvent = exports.waitForElement = exports.wait = exports.Simulate = exports.render = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _testUtils = require('react-dom/test-utils');

var _domTestingLibrary = require('dom-testing-library');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function render(ui) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$container = _ref.container,
      container = _ref$container === undefined ? document.createElement('div') : _ref$container;

  _reactDom2.default.render(ui, container);
  return _extends({
    container,
    unmount: function unmount() {
      return _reactDom2.default.unmountComponentAtNode(container);
    },
    rerender: function rerender(rerenderUi) {
      render(rerenderUi, { container });
      // Intentionally do not return anything to avoid unnecessarily complicating the API.
      // folks can use all the same utilities we return in the first place that are bound to the container
    }
  }, (0, _domTestingLibrary.bindElementToQueries)(container));
}

var mountedContainers = new Set();

function renderIntoDocument(ui) {
  var container = document.body.appendChild(document.createElement('div'));
  mountedContainers.add(container);
  return render(ui, { container });
}

function cleanup() {
  mountedContainers.forEach(function (container) {
    document.body.removeChild(container);
    _reactDom2.default.unmountComponentAtNode(container);
    mountedContainers.delete(container);
  });
}

// fallback to synthetic events for React events that the DOM doesn't support
var syntheticEvents = ['change', 'select', 'mouseEnter', 'mouseLeave'];
syntheticEvents.forEach(function (eventName) {
  document.addEventListener(eventName.toLowerCase(), function (e) {
    _testUtils.Simulate[eventName](e.target, e);
  });
});

exports.render = render;
exports.Simulate = _testUtils.Simulate;
exports.wait = _domTestingLibrary.wait;
exports.waitForElement = _domTestingLibrary.waitForElement;
exports.fireEvent = _domTestingLibrary.fireEvent;
exports.renderIntoDocument = renderIntoDocument;
exports.cleanup = cleanup;