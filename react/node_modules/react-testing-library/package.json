{
  "_from": "react-testing-library@^2.1.1",
  "_id": "react-testing-library@2.5.2",
  "_inBundle": false,
  "_integrity": "sha512-txWzvhn0dcEfX+HkVaW+NoT0jJ+GE2JIenn/gY6NdpCZv6wQ+5AH3qTCeS9bLI+nldZOe+pmkk5ztEuWn9z72Q==",
  "_location": "/react-testing-library",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-testing-library",
    "fetchSpec": "^2.1.1",
    "name": "react-testing-library",
    "raw": "react-testing-library@^2.1.1",
    "rawSpec": "^2.1.1",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-testing-library/-/react-testing-library-2.5.2.tgz",
  "_shasum": "96e587112b962881f029274136f88159bc1b1108",
  "_spec": "react-testing-library@^2.1.1",
  "_where": "C:\\Users\\lucia\\wishlist\\react",
  "author": {
    "email": "kent@doddsfamily.us",
    "name": "Kent C. Dodds",
    "url": "http://kentcdodds.com/"
  },
  "bugs": {
    "url": "https://github.com/kentcdodds/react-testing-library/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "dom-testing-library": "^1.10.0",
    "wait-for-expect": "^0.5.0"
  },
  "deprecated": false,
  "description": "Simple and complete React DOM testing utilities that encourage good testing practices.",
  "devDependencies": {
    "@types/react-dom": "^16.0.5",
    "axios": "^0.18.0",
    "eslint-import-resolver-jest": "^2.1.1",
    "history": "^4.7.2",
    "jest-dom": "^1.0.0",
    "jest-in-case": "^1.0.2",
    "kcd-scripts": "^0.37.0",
    "react": "^16.3.2",
    "react-dom": "^16.3.2",
    "react-redux": "^5.0.7",
    "react-router": "^4.2.0",
    "react-router-dom": "^4.2.2",
    "react-transition-group": "^2.3.1",
    "redux": "^4.0.0"
  },
  "engines": {
    "node": ">=6"
  },
  "eslintConfig": {
    "extends": "./node_modules/kcd-scripts/eslint.js",
    "rules": {
      "import/no-unassigned-import": "off",
      "react/prop-types": "off"
    }
  },
  "eslintIgnore": [
    "coverage",
    "dist",
    "node_modules"
  ],
  "files": [
    "dist",
    "typings"
  ],
  "homepage": "https://github.com/kentcdodds/react-testing-library#readme",
  "keywords": [
    "dom",
    "e2e",
    "end-to-end",
    "functional",
    "integration",
    "jsdom",
    "react",
    "testing",
    "ui",
    "unit"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "react-testing-library",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-dom": "*"
  },
  "readme": "<div align=\"center\">\n<h1>react-testing-library</h1>\n\n<a href=\"https://www.emojione.com/emoji/1f410\">\n<img height=\"80\" width=\"80\" alt=\"goat\" src=\"https://raw.githubusercontent.com/kentcdodds/react-testing-library/master/other/goat.png\" />\n</a>\n\n<p>Simple and complete React DOM testing utilities that encourage good testing practices.</p>\n</div>\n\n<hr />\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npmtrends]\n[![MIT License][license-badge]][license]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-22-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Code of Conduct][coc-badge]][coc]\n[![Join the community on Spectrum][spectrum-badge]][spectrum]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n## The problem\n\nYou want to write maintainable tests for your React components. As a part of\nthis goal, you want your tests to avoid including implementation details of\nyour components and rather focus on making your tests give you the confidence\nfor which they are intended. As part of this, you want your testbase to be\nmaintainable in the long run so refactors of your components (changes to\nimplementation but not functionality) don't break your tests and slow you and\nyour team down.\n\n## This solution\n\nThe `react-testing-library` is a very light-weight solution for testing React\ncomponents. It provides light utility functions on top of `react-dom` and\n`react-dom/test-utils`, in a way that encourages better testing practices.\nIt's primary guiding principle is:\n\n> [The more your tests resemble the way your software is used, the more confidence they can give you.][guiding-principle]\n\nSo rather than dealing with instances of rendered react components, your tests\nwill work with actual DOM nodes. The utilities this library provides facilitate\nquerying the DOM in the same way the user would. Finding for elements by their\nlabel text (just like a user would), finding links and buttons from their text\n(like a user would). It also exposes a recommended way to find elements by a\n`data-testid` as an \"escape hatch\" for elements where the text content and label\ndo not make sense or is not practical.\n\nThis library encourages your applications to be more accessible and allows you\nto get your tests closer to using your components the way a user will, which\nallows your tests to give you more confidence that your application will work\nwhen a real user uses it.\n\nThis library is a replacement for [enzyme](http://airbnb.io/enzyme/). While you\n_can_ follow these guidelines using enzyme itself, enforcing this is harder\nbecause of all the extra utilities that enzyme provides (utilities which\nfacilitate testing implementation details). Read more about this in\n[the FAQ](#faq) below.\n\n**What this library is not**:\n\n1.  A test runner or framework\n2.  Specific to a testing framework (though we recommend Jest as our\n    preference, the library works with any framework)\n\n> NOTE: This library is built on top of\n> [`dom-testing-library`](https://github.com/kentcdodds/dom-testing-library)\n> which is where most of the logic behind the queries is.\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n* [Installation](#installation)\n* [Usage](#usage)\n  * [`render`](#render)\n  * [`renderIntoDocument`](#renderintodocument)\n  * [`cleanup`](#cleanup)\n  * [`Simulate`](#simulate)\n  * [`wait`](#wait)\n  * [`waitForElement`](#waitforelement)\n  * [`fireEvent(node: HTMLElement, event: Event)`](#fireeventnode-htmlelement-event-event)\n* [`TextMatch`](#textmatch)\n* [`query` APIs](#query-apis)\n* [Examples](#examples)\n* [FAQ](#faq)\n* [Other Solutions](#other-solutions)\n* [Guiding Principles](#guiding-principles)\n* [Contributors](#contributors)\n* [Issues](#issues)\n  * [üêõ Bugs](#-bugs)\n  * [üí° Feature Requests](#-feature-requests)\n  * [‚ùì Questions](#-questions)\n* [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `devDependencies`:\n\n```\nnpm install --save-dev react-testing-library\n```\n\nThis library has a `peerDependencies` listing for `react-dom`.\n\nYou may also be interested in installing `dom-testing-library` so you can use\n[the custom jest matchers](https://github.com/kentcdodds/dom-testing-library/blob/master/README.md#custom-jest-matchers)\n\n## Usage\n\n```javascript\n// __tests__/fetch.js\nimport React from 'react'\nimport {render, Simulate, wait} from 'react-testing-library'\n// this add custom expect matchers from dom-testing-library\nimport 'dom-testing-library/extend-expect'\nimport axiosMock from 'axios' // the mock lives in a __mocks__ directory\nimport Fetch from '../fetch' // see the tests for a full implementation\n\ntest('Fetch makes an API call and displays the greeting when load-greeting is clicked', async () => {\n  // Arrange\n  axiosMock.get.mockImplementationOnce(() =>\n    Promise.resolve({\n      data: {greeting: 'hello there'},\n    }),\n  )\n  const url = '/greeting'\n  const {getByText, getByTestId, container} = render(<Fetch url={url} />)\n\n  // Act\n  Simulate.click(getByText('Load Greeting'))\n\n  // let's wait for our mocked `get` request promise to resolve\n  // wait will wait until the callback doesn't throw an error\n  await wait(() => getByTestId('greeting-text'))\n\n  // Assert\n  expect(axiosMock.get).toHaveBeenCalledTimes(1)\n  expect(axiosMock.get).toHaveBeenCalledWith(url)\n  expect(getByTestId('greeting-text')).toHaveTextContent('hello there')\n  expect(getByTestId('ok-button')).toHaveAttribute('disabled')\n  // snapshots work great with regular DOM nodes!\n  expect(container.firstChild).toMatchSnapshot()\n})\n```\n\n### `render`\n\nIn the example above, the `render` method returns an object that has a few\nproperties:\n\n#### `container`\n\nThe containing DOM node of your rendered React Element (rendered using\n`ReactDOM.render`). It's a `div`. This is a regular DOM node, so you can call\n`container.querySelector` etc. to inspect the children.\n\n> Tip: To get the root element of your rendered element, use `container.firstChild`.\n\n#### `rerender`\n\nIt'd probably be better if you test the component that's doing the prop updating\nto ensure that the props are being updated correctly (see\n[the Guiding Principles section](#guiding-principles)). That said, if you'd\nprefer to update the props of a rendered component in your test, this function\ncan be used to update props of the rendered component.\n\n```javascript\nconst {rerender} = render(<NumberDisplay number={1} />)\n\n// re-render the same component with different props\nrerender(<NumberDisplay number={2} />)\n```\n\n[Open the tests](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/update-props.js)\nfor a full example of this.\n\n#### `unmount`\n\nThis will cause the rendered component to be unmounted. This is useful for\ntesting what happens when your component is removed from the page (like testing\nthat you don't leave event handlers hanging around causing memory leaks).\n\n> This method is a pretty small abstraction over\n> `ReactDOM.unmountComponentAtNode`\n\n```javascript\nconst {container, unmount} = render(<Login />)\nunmount()\n// your component has been unmounted and now: container.innerHTML === ''\n```\n\n#### `getByLabelText(text: TextMatch, options: {selector: string = '*'}): HTMLElement`\n\nThis will search for the label that matches the given [`TextMatch`](#textmatch),\nthen find the element associated with that label.\n\n```javascript\nconst inputNode = getByLabelText('Username')\n\n// this would find the input node for the following DOM structures:\n// The \"for\" attribute (NOTE: in JSX with React you'll write \"htmlFor\" rather than \"for\")\n// <label for=\"username-input\">Username</label>\n// <input id=\"username-input\" />\n//\n// The aria-labelledby attribute\n// <label id=\"username-label\">Username</label>\n// <input aria-labelledby=\"username-label\" />\n//\n// Wrapper labels\n// <label>Username <input /></label>\n//\n// It will NOT find the input node for this:\n// <label><span>Username</span> <input /></label>\n//\n// For this case, you can provide a `selector` in the options:\nconst inputNode = getByLabelText('username', {selector: 'input'})\n// and that would work\n// Note that <input aria-label=\"username\" /> will also work, but take\n// care because this is not a label that users can see on the page. So\n// the purpose of your input should be obvious for those users.\n```\n\n> Note: This method will throw an error if it cannot find the node. If you don't\n> want this behavior (for example you wish to assert that it doesn't exist),\n> then use `queryByLabelText` instead.\n\n#### `getByPlaceholderText(text: TextMatch): HTMLElement`\n\nThis will search for all elements with a placeholder attribute and find one\nthat matches the given [`TextMatch`](#textmatch).\n\n```javascript\n// <input placeholder=\"Username\" />\nconst inputNode = getByPlaceholderText('Username')\n```\n\n> NOTE: a placeholder is not a good substitute for a label so you should\n> generally use `getByLabelText` instead.\n\n#### `getByText(text: TextMatch): HTMLElement`\n\nThis will search for all elements that have a text node with `textContent`\nmatching the given [`TextMatch`](#textmatch).\n\n```javascript\n// <a href=\"/about\">About ‚ÑπÔ∏è</a>\nconst aboutAnchorNode = getByText('about')\n```\n\n#### `getByAltText(text: TextMatch): HTMLElement`\n\nThis will return the element (normally an `<img>`) that has the given `alt`\ntext. Note that it only supports elements which accept an `alt` attribute:\n[`<img>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img),\n[`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input),\nand [`<area>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)\n(intentionally excluding [`<applet>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet) as it's deprecated).\n\n```javascript\n// <img alt=\"Incredibles 2 Poster\" src=\"/incredibles-2.png\" />\nconst incrediblesPosterImg = getByAltText(/incredibles.*poster$/i)\n```\n\n#### `getByTestId(text: TextMatch): HTMLElement`\n\nA shortcut to `` container.querySelector(`[data-testid=\"${yourId}\"]`) `` (and it\nalso accepts a [`TextMatch`](#textmatch)).\n\n```javascript\n// <input data-testid=\"username-input\" />\nconst usernameInputElement = getByTestId('username-input')\n```\n\n> In the spirit of [the guiding principles](#guiding-principles), it is\n> recommended to use this only after `getByLabel`, `getByPlaceholderText` or\n> `getByText` don't work for your use case. Using data-testid attributes do\n> not resemble how your software is used and should be avoided if possible.\n> That said, they are _way_ better than querying based on DOM structure.\n> Learn more about `data-testid`s from the blog post\n> [\"Making your UI tests resilient to change\"][data-testid-blog-post]\n\n### `renderIntoDocument`\n\nRender into `document.body`. Should be used with [cleanup](#cleanup).\n`renderIntoDocument` will return the same object as [render](#render)\n\n```javascript\nrenderIntoDocument(<div>)\n```\n\n### `cleanup`\n\nUnmounts React trees that were mounted with [renderIntoDocument](#renderintodocument).\n\n```javascript\nafterEach(cleanup)\n\ntest('renders into document', () => {\n  renderIntoDocument(<div>)\n  // ...\n})\n```\n\nFailing to call `cleanup` when you've called `renderIntoDocument` could\nresult in a memory leak and tests which are not `idempotent` (which can\nlead to difficult to debug errors in your tests).\n\n### `Simulate`\n\nThis is simply a re-export from the `Simulate` utility from\n`react-dom/test-utils`. See [the docs](https://reactjs.org/docs/test-utils.html#simulate).\n\nNote: `Simulate` does not simulate _browser_ events, meaning if you have an element like\n\n```javascript\n<button type=\"submit\">Submit</button>\n```\n\ncalling `Simulate.click` will not cause the submit event to be invoked. In order to get around this and for more info, see [`fireEvent`](#fireeventnode-htmlelement-event-event).\n\n### `wait`\n\nDefined as:\n\n```typescript\nfunction wait(\n  callback?: () => void,\n  options?: {\n    timeout?: number\n    interval?: number\n  },\n): Promise<void>\n```\n\nWhen in need to wait for non-deterministic periods of time you can use `wait`,\nto wait for your expectations to pass. The `wait` function is a small wrapper\naround the\n[`wait-for-expect`](https://github.com/TheBrainFamily/wait-for-expect) module.\nHere's a simple example:\n\n```javascript\n// ...\n// wait until the callback does not throw an error. In this case, that means\n// it'll wait until we can get a form control with a label that matches \"username\"\nawait wait(() => getByLabelText('username'))\ngetByLabelText('username').value = 'chucknorris'\n// ...\n```\n\nThis can be useful if you have a unit test that mocks API calls and you need\nto wait for your mock promises to all resolve. This can also be useful when\n(for example) you integration test your apollo-connected react components that\ngo a couple level deep, with queries fired up in consequent components.\n\nThe default `callback` is a no-op function (used like `await wait()`). This can\nbe helpful if you only need to wait for one tick of the event loop.\n\nThe default `timeout` is `4500ms` which will keep you under\n[Jest's default timeout of `5000ms`](https://facebook.github.io/jest/docs/en/jest-object.html#jestsettimeouttimeout).\n\nThe default `interval` is `50ms`. However it will run your callback immediately\non the next tick of the event loop (in a `setTimeout`) before starting the\nintervals.\n\n### `waitForElement`\n\nSee [dom-testing-library#waitForElement](https://github.com/kentcdodds/dom-testing-library#waitforelement)\n\n```js\nawait waitForElement(() => getByText('Search'))\n```\n\n<details>\n  <summary>\n    Example\n  </summary>\n\n```diff\ntest('should submit form when valid', async () => {\n  const mockSubmit = jest.fn()\n  const {\n    container,\n    getByLabelText,\n    getByText\n   } = render(<Form onSubmit={mockSubmit} />)\n  const nameInput = getByLabelText('Name')\n  nameInput.value = 'Chewbacca'\n  Simulate.change(nameInput)\n+ // wait for button to appear and click it\n+ const submitButton = await waitForElement(() => getByText('Search'))\n+ Simulate.click(submitButton)\n+ expect(mockSubmit).toBeCalled()\n})\n```\n\n</details>\n\n### `fireEvent(node: HTMLElement, event: Event)`\n\nFire DOM events.\n\nReact attaches an event handler on the `document` and handles some DOM events\nvia event delegation (events bubbling up from a `target` to an ancestor). Because\nof this, your `node` must be in the `document.body` for `fireEvent` to work with\nReact. You can render into the document using the\n[renderIntoDocument](#renderintodocument) utility. This is an alternative to\nsimulating Synthetic React Events via [Simulate](#simulate). The benefit of\nusing `fireEvent` over `Simulate` is that you are testing real DOM events\ninstead of Synthetic Events. This aligns better with\n[the Guiding Principles](#guiding-principles).\n\n> NOTE: If you don't like having to render into the document to get `fireEvent`\n> working, then feel free to try to chip into making it possible for React\n> to attach event handlers to the rendered node rather than the `document`.\n> Learn more here:\n> [facebook/react#2043](https://github.com/facebook/react/issues/2043)\n\n```javascript\nimport {\n  renderIntoDocument,\n  cleanup,\n  render,\n  fireEvent,\n} from 'react-testing-library'\n\n// don't forget to clean up the document.body\nafterEach(cleanup)\n\ntest('clicks submit button', () => {\n  const spy = jest.fn()\n  const {getByText} = renderIntoDocument(<button onClick={spy}>Submit</button>)\n\n  fireEvent(\n    getByText('Submit'),\n    new MouseEvent('click', {\n      bubbles: true, // click events must bubble for React to see it\n      cancelable: true,\n    }),\n  )\n\n  expect(spy).toHaveBeenCalledTimes(1)\n})\n```\n\n#### `fireEvent[eventName](node: HTMLElement, eventProperties: Object)`\n\nConvenience methods for firing DOM events. Check out\n[dom-testing-library/src/events.js](https://github.com/kentcdodds/dom-testing-library/blob/master/src/events.js)\nfor a full list as well as default `eventProperties`.\n\n```javascript\n// similar to the above example\n// click will bubble for React to see it\nconst rightClick = {button: 2}\nfireEvent.click(getElementByText('Submit'), rightClick)\n// default `button` property for click events is set to `0` which is a left click.\n```\n\n## `TextMatch`\n\nSeveral APIs accept a `TextMatch` which can be a `string`, `regex` or a\n`function` which returns `true` for a match and `false` for a mismatch.\n\nHere's an example\n\n```javascript\n// <div>Hello World</div>\n// all of the following will find the div\ngetByText('Hello World') // full match\ngetByText('llo worl') // substring match\ngetByText('hello world') // strings ignore case\ngetByText(/Hello W?oRlD/i) // regex\ngetByText((content, element) => content.startsWith('Hello')) // function\n\n// all of the following will NOT find the div\ngetByText('Goodbye World') // non-string match\ngetByText(/hello world/) // case-sensitive regex with different case\n// function looking for a span when it's actually a div\ngetByText((content, element) => {\n  return element.tagName.toLowerCase() === 'span' && content.startsWith('Hello')\n})\n```\n\n## `query` APIs\n\nEach of the `get` APIs listed in [the `render`](#render) section above have a\ncomplimentary `query` API. The `get` APIs will throw errors if a proper node\ncannot be found. This is normally the desired effect. However, if you want to\nmake an assertion that an element is _not_ present in the DOM, then you can use\nthe `query` API instead:\n\n```javascript\nconst submitButton = queryByText('submit')\nexpect(submitButton).toBeNull() // it doesn't exist\n```\n\n## Examples\n\nYou'll find examples of testing with different libraries in\n[the `examples` directory](https://github.com/kentcdodds/react-testing-library/blob/master/examples).\nSome included are:\n\n* [`react-redux`](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/react-redux.js)\n* [`react-router`](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/react-router.js)\n* [`react-context`](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/react-context.js)\n\nExamples of TDD with react-testing-library:\n\n* [`TDD-React`](https://medium.com/@mbaranovski/quick-guide-to-tdd-in-react-81888be67c64)\n\nFeel free to contribute more!\n\n## FAQ\n\n<details>\n\n<summary>Which get method should I use?</summary>\n\nBased on [the Guiding Principles](#guiding-principles), your test should\nresemble how your code (component, page, etc.) as much as possible. With this\nin mind, we recommend this order of priority:\n\n1.  `getByLabelText`: Only really good for form fields, but this is the number 1\n    method a user finds those elements, so it should be your top preference.\n2.  `getByPlaceholderText`: [A placeholder is not a substitute for a label](https://www.nngroup.com/articles/form-design-placeholders/).\n    But if that's all you have, then it's better than alternatives.\n3.  `getByText`: Not useful for forms, but this is the number 1 method a user\n    finds other elements (like buttons to click), so it should be your top\n    preference for non-form elements.\n4.  `getByAltText`: If your element is one which supports `alt` text\n    (`img`, `area`, and `input`), then you can use this to find that element.\n5.  `getByTestId`: The user cannot see (or hear) these, so this is only\n    recommended for cases where you can't match by text or it doesn't make sense\n    (the text is dynamic).\n\nOther than that, you can also use the `container` to query the rendered\ncomponent as well (using the regular\n[`querySelector` API](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)).\n\n</details>\n\n<details>\n\n<summary>Can I write unit tests with this library?</summary>\n\nDefinitely yes! You can write unit and integration tests with this library.\nSee below for more on how to mock dependencies (because this library\nintentionally does NOT support shallow rendering) if you want to unit test a\nhigh level component. The tests in this project show several examples of\nunit testing with this library.\n\nAs you write your tests, keep in mind:\n\n> The more your tests resemble the way your software is used, the more confidence they can give you. - [17 Feb 2018][guiding-principle]\n\n</details>\n\n<details>\n\n<summary>What if my app is localized and I don't have access to the text in test?</summary>\n\nThis is fairly common. Our first bit of advice is to try to get the default\ntext used in your tests. That will make everything much easier (more than just\nusing this utility). If that's not possible, then you're probably best\nto just stick with `data-testid`s (which is not bad anyway).\n\n</details>\n\n<details>\n\n<summary>If I can't use shallow rendering, how do I mock out components in tests?</summary>\n\nIn general, you should avoid mocking out components (see\n[the Guiding Principles section](#guiding-principles)). However if you need to,\nthen it's pretty trivial using\n[Jest's mocking feature](https://facebook.github.io/jest/docs/en/manual-mocks.html).\nOne case that I've found mocking to be especially useful is for animation\nlibraries. I don't want my tests to wait for animations to end.\n\n```javascript\njest.mock('react-transition-group', () => {\n  const FakeTransition = jest.fn(({children}) => children)\n  const FakeCSSTransition = jest.fn(\n    props =>\n      props.in ? <FakeTransition>{props.children}</FakeTransition> : null,\n  )\n  return {CSSTransition: FakeCSSTransition, Transition: FakeTransition}\n})\n\ntest('you can mock things with jest.mock', () => {\n  const {getByTestId, queryByTestId} = render(\n    <HiddenMessage initialShow={true} />,\n  )\n  expect(queryByTestId('hidden-message')).toBeTruthy() // we just care it exists\n  // hide the message\n  Simulate.click(getByTestId('toggle-message'))\n  // in the real world, the CSSTransition component would take some time\n  // before finishing the animation which would actually hide the message.\n  // So we've mocked it out for our tests to make it happen instantly\n  expect(queryByTestId('hidden-message')).toBeNull() // we just care it doesn't exist\n})\n```\n\nNote that because they're Jest mock functions (`jest.fn()`), you could also make\nassertions on those as well if you wanted.\n\n[Open full test](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/mock.react-transition-group.js)\nfor the full example.\n\nThis looks like more work that shallow rendering (and it is), but it gives you\nmore confidence so long as your mock resembles the thing you're mocking closly\nenough.\n\nIf you want to make things more like shallow rendering, then you could do\nsomething more\n[like this](https://github.com/kentcdodds/react-testing-library/blob/master/examples/__tests__/shallow.react-transition-group.js).\n\nLearn more about how Jest mocks work from my blog post:\n[\"But really, what is a JavaScript mock?\"](https://blog.kentcdodds.com/but-really-what-is-a-javascript-mock-10d060966f7d)\n\n</details>\n\n<details>\n\n<summary>What if I want to verify that an element does NOT exist?</summary>\n\nYou typically will get access to rendered elements using the `getByTestId` utility. However, that function will throw an error if the element isn't found. If you want to specifically test for the absence of an element, then you should use the `queryByTestId` utility which will return the element if found or `null` if not.\n\n```javascript\nexpect(queryByTestId('thing-that-does-not-exist')).toBeNull()\n```\n\n</details>\n\n<details>\n\n<summary>I really don't like data-testids, but none of the other queries make sense. Do I have to use a data-testid?</summary>\n\nDefinitely not. That said, a common reason people don't like the `data-testid`\nattribute is they're concerned about shipping that to production. I'd suggest\nthat you probably want some simple E2E tests that run in production on occasion\nto make certain that things are working smoothly. In that case the `data-testid`\nattributes will be very useful. Even if you don't run these in production, you\nmay want to run some E2E tests that run on the same code you're about to ship to\nproduction. In that case, the `data-testid` attributes will be valuable there as\nwell.\n\nAll that said, if you really don't want to ship `data-testid` attributes, then you\ncan use\n[this simple babel plugin](https://www.npmjs.com/package/babel-plugin-react-remove-properties)\nto remove them.\n\nIf you don't want to use them at all, then you can simply use regular DOM\nmethods and properties to query elements off your container.\n\n```javascript\nconst firstLiInDiv = container.querySelector('div li')\nconst allLisInDiv = container.querySelectorAll('div li')\nconst rootElement = container.firstChild\n```\n\n</details>\n\n<details>\n\n<summary>What if I‚Äôm iterating over a list of items that I want to put the data-testid=\"item\" attribute on. How do I distinguish them from each other?</summary>\n\nYou can make your selector just choose the one you want by including :nth-child in the selector.\n\n```javascript\nconst thirdLiInUl = container.querySelector('ul > li:nth-child(3)')\n```\n\nOr you could include the index or an ID in your attribute:\n\n```javascript\n<li data-testid={`item-${item.id}`}>{item.text}</li>\n```\n\nAnd then you could use the `getByTestId` utility:\n\n```javascript\nconst items = [\n  /* your items */\n]\nconst {getByTestId} = render(/* your component with the items */)\nconst thirdItem = getByTestId(`item-${items[2].id}`)\n```\n\n</details>\n\n<details>\n\n<summary>What about enzyme is \"bloated with complexity and features\" and \"encourage\npoor testing practices\"?</summary>\n\nMost of the damaging features have to do with encouraging testing implementation\ndetails. Primarily, these are\n[shallow rendering](http://airbnb.io/enzyme/docs/api/shallow.html), APIs which\nallow selecting rendered elements by component constructors, and APIs which\nallow you to get and interact with component instances (and their\nstate/properties) (most of enzyme's wrapper APIs allow this).\n\nThe guiding principle for this library is:\n\n> The more your tests resemble the way your software is used, the more confidence they can give you. - [17 Feb 2018][guiding-principle]\n\nBecause users can't directly interact with your app's component instances,\nassert on their internal state or what components they render, or call their\ninternal methods, doing those things in your tests reduce the confidence they're\nable to give you.\n\nThat's not to say that there's never a use case for doing those things, so they\nshould be possible to accomplish, just not the default and natural way to test\nreact components.\n\n</details>\n\n<details>\n\n<summary>Why isn't snapshot diffing working?</summary>\n\nIf you use the\n[snapshot-diff](https://github.com/jest-community/snapshot-diff)\nlibrary to save snapshot diffs, it won't work out of the box because\nthis library uses the DOM which is mutable. Changes don't return new\nobjects so snapshot-diff will think it's the same object and avoid diffing it.\n\nLuckily there's an easy way to make it work: clone the DOM when\npassing it into snapshot-diff. It looks like this:\n\n```js\nconst firstVersion = container.cloneNode(true)\n// Do some changes\nsnapshotDiff(firstVersion, container.cloneNode(true))\n```\n\n</details>\n\n## Other Solutions\n\nIn preparing this project,\n[I tweeted about it](https://twitter.com/kentcdodds/status/974278185540964352)\nand\n[Sune Simonsen](https://github.com/sunesimonsen)\n[took up the challenge](https://twitter.com/sunesimonsen/status/974784783908818944).\nWe had different ideas of what to include in the library, so I decided to create\nthis one instead.\n\n## Guiding Principles\n\n> [The more your tests resemble the way your software is used, the more confidence they can give you.][guiding-principle]\n\nWe try to only expose methods and utilities that encourage you to write tests\nthat closely resemble how your react components are used.\n\nUtilities are included in this project based on the following guiding\nprinciples:\n\n1.  If it relates to rendering components, it deals with DOM nodes rather than\n    component instances, nor should it encourage dealing with component\n    instances.\n2.  It should be generally useful for testing individual React components or\n    full React applications. While this library is focused on `react-dom`,\n    utilities could be included even if they don't directly relate to\n    `react-dom`.\n3.  Utility implementations and APIs should be simple and flexible.\n\nAt the end of the day, what we want is for this library to be pretty\nlight-weight, simple, and understandable.\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\"/><br /><sub><b>Kent C. Dodds</b></sub>](https://kentcdodds.com)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=kentcdodds \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=kentcdodds \"Documentation\") [üöá](#infra-kentcdodds \"Infrastructure (Hosting, Build-Tools, etc)\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=kentcdodds \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/2430381?v=4\" width=\"100px;\"/><br /><sub><b>Ryan Castner</b></sub>](http://audiolion.github.io)<br />[üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=audiolion \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/8008023?v=4\" width=\"100px;\"/><br /><sub><b>Daniel Sandiego</b></sub>](https://www.dnlsandiego.com)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=dnlsandiego \"Code\") | [<img src=\"https://avatars2.githubusercontent.com/u/12592677?v=4\" width=\"100px;\"/><br /><sub><b>Pawe≈Ç Miko≈Çajczyk</b></sub>](https://github.com/Miklet)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=Miklet \"Code\") | [<img src=\"https://avatars3.githubusercontent.com/u/464978?v=4\" width=\"100px;\"/><br /><sub><b>Alejandro √ë√°√±ez Ortiz</b></sub>](http://co.linkedin.com/in/alejandronanez/)<br />[üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=alejandronanez \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1402095?v=4\" width=\"100px;\"/><br /><sub><b>Matt Parrish</b></sub>](https://github.com/pbomb)<br />[üêõ](https://github.com/kentcdodds/react-testing-library/issues?q=author%3Apbomb \"Bug reports\") [üíª](https://github.com/kentcdodds/react-testing-library/commits?author=pbomb \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=pbomb \"Documentation\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=pbomb \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/1288694?v=4\" width=\"100px;\"/><br /><sub><b>Justin Hall</b></sub>](https://github.com/wKovacs64)<br />[üì¶](#platform-wKovacs64 \"Packaging/porting to new platform\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars1.githubusercontent.com/u/1241511?s=460&v=4\" width=\"100px;\"/><br /><sub><b>Anto Aravinth</b></sub>](https://github.com/antoaravinth)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=antoaravinth \"Code\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=antoaravinth \"Tests\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=antoaravinth \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/3462296?v=4\" width=\"100px;\"/><br /><sub><b>Jonah Moses</b></sub>](https://github.com/JonahMoses)<br />[üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=JonahMoses \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/4002543?v=4\" width=\"100px;\"/><br /><sub><b>≈Åukasz Gandecki</b></sub>](http://team.thebrain.pro)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=lgandecki \"Code\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=lgandecki \"Tests\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=lgandecki \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/498274?v=4\" width=\"100px;\"/><br /><sub><b>Ivan Babak</b></sub>](https://sompylasar.github.io)<br />[üêõ](https://github.com/kentcdodds/react-testing-library/issues?q=author%3Asompylasar \"Bug reports\") [ü§î](#ideas-sompylasar \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/4439618?v=4\" width=\"100px;\"/><br /><sub><b>Jesse Day</b></sub>](https://github.com/jday3)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=jday3 \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/15199?v=4\" width=\"100px;\"/><br /><sub><b>Ernesto Garc√≠a</b></sub>](http://gnapse.github.io)<br />[üí¨](#question-gnapse \"Answering Questions\") [üíª](https://github.com/kentcdodds/react-testing-library/commits?author=gnapse \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=gnapse \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/2747424?v=4\" width=\"100px;\"/><br /><sub><b>Josef Maxx Blake</b></sub>](http://jomaxx.com)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=jomaxx \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=jomaxx \"Documentation\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=jomaxx \"Tests\") |\n| [<img src=\"https://avatars1.githubusercontent.com/u/29602306?v=4\" width=\"100px;\"/><br /><sub><b>Michal Baranowski</b></sub>](https://twitter.com/baranovskim)<br />[üìù](#blog-mbaranovski \"Blogposts\") [‚úÖ](#tutorial-mbaranovski \"Tutorials\") | [<img src=\"https://avatars3.githubusercontent.com/u/13985684?v=4\" width=\"100px;\"/><br /><sub><b>Arthur Puthin</b></sub>](https://github.com/aputhin)<br />[üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=aputhin \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/21194045?v=4\" width=\"100px;\"/><br /><sub><b>Thomas Chia</b></sub>](https://github.com/thchia)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=thchia \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=thchia \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/20430611?v=4\" width=\"100px;\"/><br /><sub><b>Thiago Galvani</b></sub>](http://ilegra.com/)<br />[üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=thiagopaiva99 \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/19828824?v=4\" width=\"100px;\"/><br /><sub><b>Christian</b></sub>](http://Chriswcs.github.io)<br />[‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=ChrisWcs \"Tests\") | [<img src=\"https://avatars3.githubusercontent.com/u/1571667?v=4\" width=\"100px;\"/><br /><sub><b>Alex Krolick</b></sub>](https://alexkrolick.com)<br />[üí¨](#question-alexkrolick \"Answering Questions\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=alexkrolick \"Documentation\") [üí°](#example-alexkrolick \"Examples\") [ü§î](#ideas-alexkrolick \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/1239401?v=4\" width=\"100px;\"/><br /><sub><b>Johann Hubert Sonntagbauer</b></sub>](https://github.com/johann-sonntagbauer)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=johann-sonntagbauer \"Code\") [üìñ](https://github.com/kentcdodds/react-testing-library/commits?author=johann-sonntagbauer \"Documentation\") [‚ö†Ô∏è](https://github.com/kentcdodds/react-testing-library/commits?author=johann-sonntagbauer \"Tests\") |\n| [<img src=\"https://avatars2.githubusercontent.com/u/2224291?v=4\" width=\"100px;\"/><br /><sub><b>Maddi Joyce</b></sub>](http://www.maddijoyce.com)<br />[üíª](https://github.com/kentcdodds/react-testing-library/commits?author=maddijoyce \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## Issues\n\n_Looking to contribute? Look for the [Good First Issue][good-first-issue] label._\n\n### üêõ Bugs\n\nPlease file an issue for bugs, missing documentation, or unexpected behavior.\n\n[**See Bugs**][bugs]\n\n### üí° Feature Requests\n\nPlease file an issue to suggest new features. Vote on feature requests by adding\na üëç. This helps maintainers prioritize what to work on.\n\n[**See Feature Requests**][requests]\n\n### ‚ùì Questions\n\nFor questions related to using the library, please visit a support community\ninstead of filing an issue on GitHub.\n\n* [Spectrum][spectrum]\n* [Reactiflux on Discord][reactiflux]\n* [Stack Overflow][stackoverflow]\n\n## LICENSE\n\nMIT\n\n<!--\nLinks:\n-->\n\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/kentcdodds/react-testing-library.svg?style=flat-square\n[build]: https://travis-ci.org/kentcdodds/react-testing-library\n[coverage-badge]: https://img.shields.io/codecov/c/github/kentcdodds/react-testing-library.svg?style=flat-square\n[coverage]: https://codecov.io/github/kentcdodds/react-testing-library\n[version-badge]: https://img.shields.io/npm/v/react-testing-library.svg?style=flat-square\n[package]: https://www.npmjs.com/package/react-testing-library\n[downloads-badge]: https://img.shields.io/npm/dm/react-testing-library.svg?style=flat-square\n[npmtrends]: http://www.npmtrends.com/react-testing-library\n[spectrum-badge]: https://withspectrum.github.io/badge/badge.svg\n[spectrum]: https://spectrum.chat/react-testing-library\n[license-badge]: https://img.shields.io/npm/l/react-testing-library.svg?style=flat-square\n[license]: https://github.com/kentcdodds/react-testing-library/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/kentcdodds/react-testing-library/blob/master/CODE_OF_CONDUCT.md\n[github-watch-badge]: https://img.shields.io/github/watchers/kentcdodds/react-testing-library.svg?style=social\n[github-watch]: https://github.com/kentcdodds/react-testing-library/watchers\n[github-star-badge]: https://img.shields.io/github/stars/kentcdodds/react-testing-library.svg?style=social\n[github-star]: https://github.com/kentcdodds/react-testing-library/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20react-testing-library%20by%20%40kentcdodds%20https%3A%2F%2Fgithub.com%2Fkentcdodds%2Freact-testing-library%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/kentcdodds/react-testing-library.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[set-immediate]: https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate\n[guiding-principle]: https://twitter.com/kentcdodds/status/977018512689455106\n[data-testid-blog-post]: https://blog.kentcdodds.com/making-your-ui-tests-resilient-to-change-d37a6ee37269\n[bugs]: https://github.com/kentcdodds/react-testing-library/issues?q=is%3Aissue+is%3Aopen+label%3Abug+sort%3Acreated-desc\n[requests]: https://github.com/kentcdodds/react-testing-library/issues?q=is%3Aissue+sort%3Areactions-%2B1-desc+label%3Aenhancement+is%3Aopen\n[good-first-issue]: https://github.com/kentcdodds/react-testing-library/issues?utf8=‚úì&q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc+label%3A\"good+first+issue\"+\n[reactiflux]: https://www.reactiflux.com/\n[stackoverflow]: https://stackoverflow.com/questions/tagged/react-testing-library\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kentcdodds/react-testing-library.git"
  },
  "scripts": {
    "add-contributor": "kcd-scripts contributors add",
    "build": "kcd-scripts build",
    "lint": "kcd-scripts lint",
    "precommit": "kcd-scripts precommit",
    "setup": "npm install && npm run validate -s",
    "test": "kcd-scripts test --config=other/jest.config.js",
    "test:update": "npm test -- --updateSnapshot --coverage",
    "validate": "kcd-scripts validate"
  },
  "typings": "typings/index.d.ts",
  "version": "2.5.2"
}
