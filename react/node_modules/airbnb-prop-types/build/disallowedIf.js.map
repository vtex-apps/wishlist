{"version":3,"sources":["../src/disallowedIf.js"],"names":["disallowedIf","propType","otherPropName","otherPropType","isRequired","TypeError","disallowedIfRequired","props","propName","componentName","rest","error","otherError","Error","validator","disallowedIfPropType"],"mappings":";;;qBAEwBA,Y;;AAFxB;;;;;;AAEe,SAASA,YAAT,CAAsBC,QAAtB,EAAgCC,aAAhC,EAA+CC,aAA/C,EAA8D;AAC3E,MAAI,OAAOF,QAAP,KAAoB,UAApB,IAAkC,OAAOA,SAASG,UAAhB,KAA+B,UAArE,EAAiF;AAC/E,UAAM,IAAIC,SAAJ,CAAc,uFAAd,CAAN;AACD;;AAED,MAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAuC;AACrC,UAAM,IAAIG,SAAJ,CAAc,kCAAd,CAAN;AACD;;AAED,MAAI,OAAOF,aAAP,KAAyB,UAA7B,EAAyC;AACvC,UAAM,IAAIE,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAED,WAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,QAArC,EAA+CC,aAA/C,EAAuE;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACrE,QAAMC,QAAQV,SAASG,UAAT,kBAAoBG,KAApB,EAA2BC,QAA3B,EAAqCC,aAArC,SAAuDC,IAAvD,EAAd;AACA,QAAIC,KAAJ,EAAW;AACT,aAAOA,KAAP;AACD;;AAED,QAAIJ,MAAML,aAAN,KAAwB,IAA5B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,QAAMU,aAAaT,gCAAcI,KAAd,EAAqBL,aAArB,EAAoCO,aAApC,SAAsDC,IAAtD,EAAnB;AACA,QAAIE,UAAJ,EAAgB;AACd,aAAO,IAAP;AACD;AACD,WAAO,IAAIC,KAAJ,wBAAmBL,QAAnB,gDAAoDN,aAApD,4CAAP;AACD;;AAED,MAAMY;AAAY,aAASC,oBAAT,CAA8BR,KAA9B,EAAqCC,QAArC,EAAwD;AACxE,UAAID,MAAMC,QAAN,KAAmB,IAAvB,EAA6B;AAC3B,eAAO,IAAP;AACD;;AAHuE,yCAANE,IAAM;AAANA,YAAM;AAAA;;AAIxE,aAAOJ,uCAAqBC,KAArB,EAA4BC,QAA5B,SAAyCE,IAAzC,EAAP;AACD;;AALK,WAAqBK,oBAArB;AAAA,KAAN;;AAOAD,YAAUV,UAAV,GAAuBE,oBAAvB;;AAEA,SAAO,gCAAcQ,SAAd,EAAyB,cAAzB,EAAyC,EAAEb,kBAAF,EAAYC,4BAAZ,EAA2BC,4BAA3B,EAAzC,CAAP;AACD","file":"disallowedIf.js","sourcesContent":["import wrapValidator from './helpers/wrapValidator';\n\nexport default function disallowedIf(propType, otherPropName, otherPropType) {\n  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {\n    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');\n  }\n\n  if (typeof otherPropName !== 'string') {\n    throw new TypeError('other prop name must be a string');\n  }\n\n  if (typeof otherPropType !== 'function') {\n    throw new TypeError('other prop type validator is required');\n  }\n\n  function disallowedIfRequired(props, propName, componentName, ...rest) {\n    const error = propType.isRequired(props, propName, componentName, ...rest);\n    if (error) {\n      return error;\n    }\n\n    if (props[otherPropName] == null) {\n      return null;\n    }\n\n    const otherError = otherPropType(props, otherPropName, componentName, ...rest);\n    if (otherError) {\n      return null;\n    }\n    return new Error(`prop “${propName}” is disallowed when “${otherPropName}” matches the provided validator`);\n  }\n\n  const validator = function disallowedIfPropType(props, propName, ...rest) {\n    if (props[propName] == null) {\n      return null;\n    }\n    return disallowedIfRequired(props, propName, ...rest);\n  };\n\n  validator.isRequired = disallowedIfRequired;\n\n  return wrapValidator(validator, 'disallowedIf', { propType, otherPropName, otherPropType });\n}\n"]}