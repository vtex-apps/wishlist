{"version":3,"sources":["../src/sequenceOf.js"],"names":["sequenceOfValidator","minValidator","nonNegativeInteger","maxValidator","gte","validateRange","min","max","RangeError","specifierShape","validator","props","propName","propValue","TypeError","getMinMax","minimum","maximum","Infinity","chunkByType","items","chunk","lastType","reduce","chunks","item","itemType","push","concat","length","validateChunks","specifiers","componentName","rest","i","arrayOfValidator","isRequired","shift","chunkError","unshift","specifierValidator","errors","map","specifier","some","Boolean","e","message","join","sequenceOf","error","array","sequenceOfRequired"],"mappings":"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","file":"sequenceOf.js","sourcesContent":["import { array, arrayOf } from 'prop-types';\n\nimport and from './and';\nimport between from './between';\nimport nonNegativeInteger from './nonNegativeInteger';\nimport object from './object';\nimport withShape from './withShape';\nimport typeOf from './helpers/typeOf';\nimport wrapValidator from './helpers/wrapValidator';\n\nconst minValidator = nonNegativeInteger;\nconst maxValidator = and([nonNegativeInteger, between({ gte: 1 })]);\n\nfunction validateRange(min, max) {\n  if (typeof max !== 'number' || typeof min !== 'number') {\n    return null; // no additional checking needed unless both are present\n  }\n\n  if (min <= max) {\n    return null;\n  }\n  return new RangeError('min must be less than or equal to max');\n}\n\nconst specifierShape = {\n  validator(props, propName) {\n    const { [propName]: propValue } = props;\n    if (typeof propValue !== 'function') {\n      return new TypeError('\"validator\" must be a propType validator function');\n    }\n    return null;\n  },\n\n  min(props, propName) {\n    return minValidator(props, propName) || validateRange(props.min, props.max);\n  },\n\n  max(props, propName) {\n    return maxValidator(props, propName) || validateRange(props.min, props.max);\n  },\n};\n\nfunction getMinMax({ min, max }) {\n  let minimum;\n  let maximum;\n  if (typeof min !== 'number' && typeof max !== 'number') {\n    // neither provided, default to \"1\"\n    minimum = 1;\n    maximum = 1;\n  } else {\n    minimum = typeof min === 'number' ? min : 1;\n    maximum = typeof max === 'number' ? max : Infinity;\n  }\n  return { minimum, maximum };\n}\n\nfunction chunkByType(items) {\n  let chunk = [];\n  let lastType;\n  return items.reduce((chunks, item) => {\n    const itemType = typeOf(item);\n    if (!lastType || itemType === lastType) {\n      chunk.push(item);\n    } else {\n      chunks.push(chunk);\n      chunk = [item];\n    }\n    lastType = itemType;\n    return chunks;\n  }, []).concat(chunk.length > 0 ? [chunk] : []);\n}\n\nfunction validateChunks(specifiers, props, propName, componentName, ...rest) {\n  const { [propName]: items } = props;\n  const chunks = chunkByType(items);\n\n  for (let i = 0; i < specifiers.length; i += 1) {\n    const { validator, min, max } = specifiers[i];\n\n    const { minimum, maximum } = getMinMax({ min, max });\n\n    if (chunks.length === 0 && minimum === 0) {\n      // no chunks left, but this specifier does not require any items\n      continue; // eslint-disable-line no-continue\n    }\n\n    const arrayOfValidator = arrayOf(validator).isRequired;\n\n    const chunk = chunks.shift(); // extract the next chunk to test\n\n    const chunkError = arrayOfValidator(\n      { ...props, [propName]: chunk },\n      propName,\n      componentName,\n      ...rest,\n    );\n\n    if (chunkError) { // this chunk is invalid\n      if (minimum === 0) { // but, specifier has a min of 0 and can be skipped\n        chunks.unshift(chunk); // put the chunk back, for the next iteration\n        continue; // eslint-disable-line no-continue\n      }\n      return chunkError;\n    }\n\n    // chunk is valid!\n\n    if (chunk.length < minimum) {\n      return new RangeError(`${componentName}: specifier index ${i} requires a minimum of ${min} items, but only has ${chunk.length}.`);\n    }\n\n    if (chunk.length > maximum) {\n      return new RangeError(`${componentName}: specifier index ${i} requires a maximum of ${max} items, but has ${chunk.length}.`);\n    }\n  }\n\n  if (chunks.length > 0) {\n    return new TypeError(`${componentName}: after all ${specifiers.length} specifiers matched, ${chunks.length} types of items were remaining.`);\n  }\n\n  return null;\n}\n\nconst specifierValidator = withShape(object(), specifierShape).isRequired;\n\nexport default function sequenceOfValidator(...specifiers) {\n  if (specifiers.length === 0) {\n    throw new RangeError('sequenceOf: at least one specifier is required');\n  }\n\n  const errors = specifiers.map((specifier, i) => specifierValidator(\n    { specifier },\n    'specifier',\n    'sequenceOf specifier',\n    `suequenceOf specifier, index ${i}`,\n    `specifier, index ${i}`,\n  ));\n  if (errors.some(Boolean)) {\n    throw new TypeError(`\n      sequenceOf: all specifiers must match the appropriate shape.\n\n      Errors:\n        ${errors.map((e, i) => ` - Argument index ${i}: ${e.message}`).join(',\\n        ')}\n    `);\n  }\n\n  const validator = function sequenceOf(props, propName, ...rest) {\n    const { [propName]: propValue } = props;\n\n    if (propValue == null) {\n      return null;\n    }\n\n    const error = array(props, propName, ...rest);\n    if (error) {\n      return error;\n    }\n\n    return validateChunks(specifiers, props, propName, ...rest);\n  };\n\n  validator.isRequired = function sequenceOfRequired(props, propName, componentName, ...rest) {\n    const error = array.isRequired(props, propName, componentName, ...rest);\n    if (error) {\n      return error;\n    }\n\n    return validateChunks(specifiers, props, propName, componentName, ...rest);\n  };\n\n  return wrapValidator(validator, 'sequenceOf', specifiers);\n}\n"]}