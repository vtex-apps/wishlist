{
  "_from": "react-device-detect@^1.5.8",
  "_id": "react-device-detect@1.6.1",
  "_inBundle": false,
  "_integrity": "sha512-TTmKu3JK3W7gWrjnm4K1OS0v5CMtkFtG4pIrQvZ8mJu6xvqfmXnkMO5jkh3Tz2homaFYIaJ6Pzbx4E51mg5neA==",
  "_location": "/react-device-detect",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-device-detect",
    "fetchSpec": "^1.5.8",
    "name": "react-device-detect",
    "raw": "react-device-detect@^1.5.8",
    "rawSpec": "^1.5.8",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-device-detect/-/react-device-detect-1.6.1.tgz",
  "_shasum": "3730e74e25fd79be19ac99fc6a07e751255b9232",
  "_shrinkwrap": null,
  "_spec": "react-device-detect@^1.5.8",
  "_where": "C:\\Users\\lucia\\wishlist\\react",
  "author": {
    "email": "duskload@gmail.com",
    "name": "Michael Laktionov"
  },
  "bugs": {
    "url": "https://github.com/duskload/react-device-detect/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Detect device type and render your component according to it",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.0",
    "babel-jest": "^21.2.0",
    "babel-loader": "^7.1.2",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-plugin-transform-react-jsx": "^6.24.1",
    "babel-preset-env": "^1.6.0",
    "enzyme": "^3.1.0",
    "enzyme-adapter-react-16": "^1.0.1",
    "jest": "^21.2.1",
    "raf": "^3.4.0",
    "react-test-renderer": "^16.0.0",
    "ua-parser-js": "^0.7.18",
    "webpack": "^3.7.1"
  },
  "homepage": "https://github.com/duskload/react-device-detect#readme",
  "jest": {
    "coveragePathIgnorePatterns": [
      "./.jestSetup.js",
      "/node_modules/"
    ],
    "setupFiles": [
      "./.jestSetup.js"
    ]
  },
  "keywords": [
    "browser",
    "console",
    "detect",
    "device",
    "mobile",
    "model",
    "phone",
    "smart-tv",
    "smarttv",
    "tablet",
    "useragent",
    "version"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "name": "react-device-detect",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0 || ^16",
    "react-dom": "^0.14.0 || ^15.0.0 || ^16"
  },
  "readme": "## react-device-detect\n\nDetect device, and render view according to detected device type.\n\n## Installation\n\nTo install, you can use npm or yarn:\n\n```\nnpm install react-device-detect --save\n\nor\n\nyarn add react-device-detect\n```\n\n## Usage\n\nExample:\n\n```javascript\nimport {\n  BrowserView,\n  MobileView,\n  isBrowser,\n  isMobile\n} from \"react-device-detect\";\n```\n\n```html\n<BrowserView>\n    <h1> This is rendered only in browser </h1>\n</BrowserView>\n<MobileView>\n    <h1> This is rendered only on mobile </h1>\n</MobileView>\n```\n\nif you don't need a view, you can use `isMobile` for conditional rendering\n\n```javascript\nimport {isMobile} from 'react-device-detect';\n\nrenderContent = () => {\n    if (isMobile) {\n        return <div> This content is unavailable on mobile</div>\n    }\n    return <div> ...content </div>\n}\n\nrender() {\n    return this.renderContent();\n}\n```\n\nIf you wan't to leave a message to specific browser (e.g IE), you can use `isIE` selector\n\n```javascript\nimport {isIE} from 'react-device-detect';\n\nrender() {\n    if (isIE) return <div> IE is not supported. Download Chrome/Opera/Firefox </div>\n    return (\n        <div>...content</div>\n    )\n}\n```\n\nIf you want to render a view on specific device and with specific condition:\n\n```javascript\nimport { browserName, CustomView } from 'react-device-detect';\n\nrender() {\n    return (\n        <CustomView condition={browserName === \"Chrome\"}>\n            <div>...content</div>\n        </CustomView>\n    )\n}\n```\n\n## Style the view\n\nYoa can style view component by passing class to `viewClassName` prop\n\n```html\n<BrowserView viewClassName='custom-class'>\n    <p> View content </p>\n</BrowserView>\n```\n\nor you can pass inline styles to `style` prop\n\n```javascript\nconst styles = {\n  background: \"red\",\n  fontSize: \"24px\",\n  lineHeight: \"2\"\n};\n```\n\n```html\n<BrowserView style={styles}>\n    <p> View content</p>\n</BrowserView>\n```\n\n## Selectors and views\n\n### Selectors\n\n| prop               | type     | description                                                                            |\n| ------------------ | -------- | -------------------------------------------------------------------------------------- |\n| isMobile           | bool     | returns true if device type is `mobile` or `tablet`                                    |\n| isMobileOnly       | bool     | returns true if device type is `mobile`                                                |\n| isTablet           | bool     | returns true if device type is `tablet`                                                |\n| isBrowser          | bool     | returns true if device type is `browser`                                               |\n| isSmartTV          | bool     | returns true if device type is `smarttv`                                               |\n| isWearable         | bool     | returns true if device type is `wearable`                                              |\n| isConsole          | bool     | returns true if device type is `console`                                               |\n| isAndroid          | bool     | returns true if os type is `Android`                                                   |\n| isWinPhone         | bool     | returns true if os type is `Windows Phone`                                             |\n| isIOS              | bool     | returns true if os type is `iOS`                                                       |\n| isChrome           | bool     | returns true if browser is `Chrome`                                                    |\n| isFirefox          | bool     | returns true if browser is `Firefox`                                                   |\n| isSafari           | bool     | returns true if browser is `Safari`                                                    |\n| isOpera            | bool     | returns true if browser is `Opera`                                                     |\n| isIE               | bool     | returns true if browser is `Internet Explorer`                                         |\n| isEdge             | bool     | returns true if browser is `Edge`                                                      |\n| isYandex           | bool     | returns true if browser is `Yandex`                                                    |\n| isChromium         | bool     | returns true if browser is `Chromium`                                                  |\n| isMobileSafari     | bool     | returns true if browser is `Mobile Safari`                                             |\n| osVersion          | string   | returns os version (e.g 7 for `Windows` or 6 for `Android`)                            |\n| osName             | string   | returns os name (e.g `Windows`, `Android`)                                             |\n| fullBrowserVersion | string   | returns full browser version (e.g 65.0.3325.181 for `Chrome`)                          |\n| browserVersion     | string   | returns browser `major` version (e.g 65 in `Chrome` or 9 in `IE`)                      |\n| browserName        | string   | returns browser name                                                                   |\n| mobileVendor       | string   | returns mobile device vendor (e.g `LG`, `iPhone` etc)                                  |\n| mobileModel        | string   | returns mobile device model (e.g `Nexus 5`)                                            |\n| engineName         | string   | returns browser engine `name` (e.g `Gecko` for FF or `WebKit` for Chrome)              |\n| engineVersion      | string   | returns engine version                                                                 |\n| getUA              | string   | returns user agent                                                                     |\n| deviceDetect       | function | return data object which includes all data about device (e.g version, engine, os etc.) |\n\n### Views\n\nAvailable views:\n\n- MobileView\n- BrowserView\n- TabletView\n- AndroidView\n- IOSView\n- IEView\n- WinPhoneView\n- MobileOnlyView\n- SmartTVView\n- ConsoleView\n- WearableView\n- CustomView -- has `condition` prop which takes any expression which results into boolean (e.g browserName === 'Chrome')\n\nEach view accepts three props:\n\n1.  `viewClassName` - to style the view\n2.  `style` - to add inline styles to view\n3.  `children` - to pass children to view\n4.  `renderWithFragment` - render with `React.Fragment` instead of `<div>`\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/duskload/react-device-detect.git"
  },
  "scripts": {
    "build": "webpack",
    "cover": "jest --coverage",
    "start": "webpack --watch",
    "test": "jest",
    "test:watch": "jest --watch"
  },
  "typings": "./index.d.ts",
  "version": "1.6.1"
}
